#include <ultra64.h>
#include <ramrom.h>
#include "n64audio.h"

/*
 * Double buffered storage for wavetable data
 */
Acmd				*cmdList[2];
s16					audioSamples[3] = {0, 0, 0};
s16					*audioBuffer[3];
ALHeap				hp;
ALGlobals			g;
ALSynConfig			c;
ALSndpConfig		SPConfig;
u8					audioHeap[AUDIO_HEAP_SIZE];
s32					audioframeSize, minFrameSize, samplesLeft = 0; 
f32					fsize;
ALSndPlayer		    Sndp, *sndp = &Sndp;
ALSound				*snd;
ALSeqPlayer			sequencePlayer, *seqp = &sequencePlayer;
ALSeqpConfig		seqc;
ALBank				*midiBank, *sfxBank;
ALSeq				sequence, *seq = &sequence;
ALSndId				*idPtr;
ALSeqFile			*sfile;
ALInstrument		*inst; 
s32					nextAudioDMA = 0;
s32					curAudioBuf = 1;
Acmd				*cmdlp;
OSTask				*tlistp;

// external references 
extern OSTask			*tlistp;
extern OSTask           *tlist[];               /* global task list      */
extern OSIoMesg			dmaIOMessageBuf;
extern OSMesg			dmaMessageBuf[];
extern OSMesg			taskMessageBuf;
extern OSIoMesg			dmaIOMesgBuf[];
extern OSMesgQueue		AudioDmaMessageQ, taskMessageQ, retraceMessageQ;
extern s32				curBuf;
extern u8 _seqSegmentRomStart[], _seqSegmentRomEnd[];
extern u8 _sfxbankSegmentRomStart[], _sfxbankSegmentRomEnd[];
extern u8 _sfxtableSegmentRomStart[], _sfxtableSegmentRomEnd[];
extern u8 _midibankSegmentRomStart[], _midibankSegmentRomEnd[];
extern u8 _miditableSegmentRomStart[], _miditableSegmentRomEnd[];

/*****************************************************************************
*
*	Function Title: s32 dmaCallBack(s32 addr, s32 len, void *state)
*
******************************************************************************
*
*	Description:	This will calculate the address of the next transfer.
*					If that address is outside of the audio buffers. It 
*					will send get the next chunk of audio data from the
*					cartridge.	 
*
*	Inputs:			
*
*	Outputs:		
*
*****************************************************************************/
s32 dmaCallBack(s32 addr, s32 len, void *state)
{
    void        *freeBuffer;
    DMAState    *dState = state;
    s32         delta = 0;
    u32         bStartAddr;
    u32         bEndAddr;
    DMABuffer   *dBuff = &dState->buffers[dState->currentBuffer];
	/*
     * Is it in the last buffer
     */
    bStartAddr = (u32) dBuff->addr;
    bEndAddr = (u32) bStartAddr + dBuff->len;

    if ((addr >= bStartAddr) && (addr+len <= bEndAddr))
	{
        freeBuffer = dBuff->ptr + addr - dBuff->addr;
    } 
	else
	{
        if (++dState->currentBuffer >= dState->nBuffers )	// wrap arround
            dState->currentBuffer = 0;
        dBuff = &dState->buffers[dState->currentBuffer];
        freeBuffer = dBuff->ptr;
        delta = addr & 0x1;	// make sure address is even
        addr -= delta;
        dBuff->addr = addr;
        dBuff->len = dBuff->size;	 // size = 1024
		osPiStartDma(&dmaIOMesgBuf[nextAudioDMA++], OS_MESG_PRI_NORMAL, OS_READ,
                     (u32)addr, freeBuffer, dBuff->size, &AudioDmaMessageQ);
	}

    return (s32) osVirtualToPhysical(freeBuffer) + delta;
}


/*****************************************************************************
*
*	Function Title: ALDMAproc dmaNew(DMAState **state)
*
******************************************************************************
*
*	Description:	This will initialize a voice in the sound player. It also 
*					sets the call back routines for DMA transfers.	
*
*	Inputs:			DMA stat
*
*	Outputs:		address of callback routine
*
*****************************************************************************/
ALDMAproc dmaNew(DMAState **state)
{
    s32         i;
    DMAState    *dState;
 
    dState = (DMAState *) alHeapAlloc(&hp, 1, sizeof(DMAState));
    dState->currentBuffer = 0;
    dState->nBuffers = NBUFFERS;	// 4 buffers
    for (i=0; i<NBUFFERS; i++)
	{
        dState->buffers[i].ptr = alHeapAlloc(&hp, 1, MAX_BUFFER_LENGTH);	//MAX_BUFFER_LENGTH  = 1024
        dState->buffers[i].addr = 0;
        dState->buffers[i].len = 0;
        dState->buffers[i].size = MAX_BUFFER_LENGTH;
    }
    *state = (DMAState *) dState;

	//rmonPrintf("cbn\n");
    return dmaCallBack;
}



/*****************************************************************************
*
*	Function Title: (void) InitAudioSystem()
*
******************************************************************************
*
*	Description:	This will init sound player and allocate the memory 
*					for sound buffers.	
*
*	Inputs:			none
*
*	Outputs:		none
*
*****************************************************************************/
void InitAudioSystem()
{



	// Audio initialization
	//snd_status = AL_STOPPED;	
	alHeapInit(&hp, audioHeap, AUDIO_HEAP_SIZE);
    cmdList[0] = alHeapAlloc(&hp, 1, MAX_CLIST_SIZE*sizeof(Acmd));
    cmdList[1] = alHeapAlloc(&hp, 1, MAX_CLIST_SIZE*sizeof(Acmd));
    tlist[0] = alHeapAlloc(&hp, 1, sizeof(OSTask));
    tlist[1] = alHeapAlloc(&hp, 1, sizeof(OSTask));
    audioBuffer[0] = alHeapAlloc(&hp, 1, sizeof(s32)*MAX_AUDIO_LENGTH);
    audioBuffer[1] = alHeapAlloc(&hp, 1, sizeof(s32)*MAX_AUDIO_LENGTH);
    audioBuffer[2] = alHeapAlloc(&hp, 1, sizeof(s32)*MAX_AUDIO_LENGTH);


	/*
     * Audio synthesizer initialization
     */
    /* Initialize the DACs */
    c.outputRate = osAiSetFrequency(OUTPUT_RATE);
    fsize = (f32) NUM_FIELDS * c.outputRate / (f32) 60;

    audioframeSize = (s32) fsize;
    if (audioframeSize < fsize)
        audioframeSize++;
    if (audioframeSize & 0xf)
        audioframeSize = (audioframeSize & ~0xf) + 0x10;
    minFrameSize = audioframeSize - 16;

    /*
     * initialize audio synthesizer
     */
    c.maxVVoices = MAX_VOICES;
    c.maxPVoices = MAX_VOICES;
    c.maxUpdates = MAX_UPDATES;
    c.dmaproc    = &dmaNew;
	c.fxType	 = AL_FX_BIGROOM;
    c.heap       = &hp;

    alInit(&g, &c);

    /*
     * Initialize the soundplayer
     */
    SPConfig.maxSounds = MAX_VOICES;
    SPConfig.maxEvents = EVT_COUNT;
    SPConfig.heap  = &hp;
    alSndpNew(sndp, &SPConfig);
}



/*****************************************************************************
*
*	Function Title: static s32 nActiveSounds(ALSndPlayer *sndp, ALInstrument  *inst, ALSndId *idPtr)
*
******************************************************************************
*
*	Description:	This finds the number of active sounds that are being played
*
*	Inputs:			none
*
*	Outputs:		none
*
*****************************************************************************/
static s32 nActiveSounds(ALSndPlayer *sndp, ALInstrument  *inst, ALSndId *idPtr)

{
    s32		i,  nactive = 0;

    for (i=0; i<sndp->maxSounds; i++)
	{
        alSndpSetSound(sndp, idPtr[SFX_NUM]);
        if (alSndpGetState(sndp) != AL_STOPPED)
            nactive++;
    }
    return nactive;
}

/*****************************************************************************
*
*	Function Title: void updateAudio()
*
******************************************************************************
*
*	Description:	This will build the audio task list that will be sent to the RCP and
*					swaps the audio buffers.	
*
*	Inputs:			none
*
*	Outputs:		none
*
*****************************************************************************/
void updateAudio()
{	

	s32			buf;
	int			i;

	/*
	 * Build the audio task
	 */
	tlistp->t.type = M_AUDTASK;
	tlistp->t.flags = 0x0;
	tlistp->t.ucode_boot = (u64 *) rspbootTextStart;
	tlistp->t.ucode_boot_size = ((s32)rspbootTextEnd -
								 (s32)rspbootTextStart);
	tlistp->t.ucode = (u64 *) aspMainTextStart;
	tlistp->t.ucode_data = (u64 *) aspMainDataStart;
	tlistp->t.ucode_size = 4096;
		tlistp->t.ucode_data_size = sizeof(u64)*(aspMainDataEnd - aspMainDataStart);
	tlistp->t.data_ptr = (u64 *) cmdList[curBuf];
	tlistp->t.data_size = (cmdlp - cmdList[curBuf]) * sizeof(Acmd);

	/*
	 * Video does nothing - just syncs up on the frame boundary.
	 */
	(void)osRecvMesg(&retraceMessageQ, NULL, OS_MESG_BLOCK);

	/*
	 * Find out how many samples left in the currently running
	 * audio buffer
	 */
	samplesLeft = IO_READ(AI_LEN_REG)>>2;

	/*
	 * The last task should have finished before the frame message
	 * so this just clears the message queue
	 */
	(void)osRecvMesg(&taskMessageQ, NULL, OS_MESG_BLOCK);

	/*
	 * Stick the task output in files - or to the DAC
	 */
	buf = (curAudioBuf-1) % 3;
	osAiSetNextBuffer(audioBuffer[buf], audioSamples[buf]<<2);

	/*
	 * Empty the dma queue to make sure all DMAs have completed
	 */
	for (i=0; i<nextAudioDMA; i++)
		(void) osRecvMesg(&AudioDmaMessageQ, NULL, OS_MESG_BLOCK);

	osWritebackDCacheAll();
	osSpTaskStart(tlistp);

	/*
	 * Swap buffers for wavetable storage and output
	 */
	curBuf ^= 1;
	curAudioBuf++;
	nextAudioDMA = 0;


}

/*****************************************************************************
 *
 *		Function Title:	void playSFX(int x, int y, int z, int sfx_num)
 *
 *****************************************************************************
 *
 *		Description:	this will play the specified sound effect at x,y,z
 *
 *		Inputs:			int			sfx_num
 *
 *		Outputs:		none
 *
 ****************************************************************************/
void playSFX(int EarX, int EarY, int EarZ, int sfx_num)
{
    static f32				pitch = 1;
    u8				fxmix, pan;
	s16				vol;
					


	//pitch = 1;
	fxmix = 0;
	pan = 64;

	alSndpSetSound(sndp, idPtr[sfx_num]);
    alSndpSetPitch(sndp, pitch);
    alSndpSetFXMix(sndp, fxmix);
    
    alSndpSetPan(sndp, pan);
    vol = 32000;
    alSndpSetVol(sndp, vol);
    alSndpPlay(sndp);

	pitch -= 0.2;


#if 0
		//if ((nActiveSounds(sndp, inst, idPtr) == 0) && (delay_counter > SFX_DELAY))
		if (nActiveSounds(sndp, inst, idPtr) == 0) 
        {
            alSndpSetSound(sndp, idPtr[SFX_NUM]);
			pitch = 15;
            alSndpSetPitch(sndp, pitch);
            fxmix = 64;	//range: (0, 127)
            alSndpSetFXMix(sndp, fxmix);
            pan = 64;	//range: (0, 127)
            alSndpSetPan(sndp, pan);
            vol = 32000;	//range: (0, 32000); 
            alSndpSetVol(sndp, vol);
            alSndpPlay(sndp);
			//rmonPrintf("1\n");
			delay_counter = 0;
        }
		
		if (nActiveSounds(sndp, inst, idPtr) != 0)	
		{
            nTries = 0;
            do 
			{
                if (nTries++ > MAX_TRIES)
                    break;
                
                alSndpSetSound(sndp, idPtr[SFX_NUM]);
            } while (alSndpGetState(sndp) != AL_PLAYING);
            if (nTries < MAX_TRIES)
                alSndpStop(sndp);
        }
    
		delay_counter++;


#endif


}


/*****************************************************************************
*
*		Function Title:	void allocateSFX
*
*****************************************************************************
*
*		Description:	will allocate and load sound effetcs
*
*		Inputs:			
*
*		Outputs:		
*
****************************************************************************/
s32	 allocateSFX()
{
	s32				bankLen, numAllocated;
    u8				*sfxBankPtr;


    bankLen = _sfxbankSegmentRomEnd - _sfxbankSegmentRomStart;
    sfxBankPtr = alHeapAlloc(&hp, 1, bankLen);
    osWritebackDCacheAll();
    osPiStartDma(&dmaIOMessageBuf, OS_MESG_PRI_NORMAL, OS_READ,
                 (u32)_sfxbankSegmentRomStart, sfxBankPtr,
                 bankLen, &AudioDmaMessageQ);
    (void) osRecvMesg(&AudioDmaMessageQ, NULL, OS_MESG_BLOCK);

	
	//Allocate all the sounds
    alBnkfNew((ALBankFile *)sfxBankPtr, _sfxtableSegmentRomStart);

	// sfxBank is *ALBank
    sfxBank = ((ALBankFile *)sfxBankPtr)->bankArray[0];
    
	// inst is of *ALInstrument
    inst = sfxBank->instArray[0];
    idPtr = alHeapAlloc(&hp, 1, inst->soundCount*sizeof(ALSndId));

    //for (i=0, numAllocated = 0; i < inst->soundCount; i++)
	{	
		// snd is of *ALSound 
        snd = inst->soundArray[SFX_NUM];
        if ((idPtr[SFX_NUM] = alSndpAllocate(sndp, snd)) != -1)
            numAllocated++;
    }

	return numAllocated;

}

